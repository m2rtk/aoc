@file:Suppress("unused")

package aoc.y15.d10

import aoc.Puzzle

internal fun naive(input: String, times: Int): Int {

    fun run(input: String): String {
        var newString = ""
        var index = 0

        fun eatSameValues(): String {
            val key = input[index]

            val values = input.substring(index).takeWhile { it == key }
            index += values.length
            return values
        }

        while (index < input.length) {
            val values = eatSameValues()
            val value = values[0]
            val length = values.length

            newString += length
            newString += value
        }

        return newString
    }

    return (0 until times).fold(input) { acc, i ->
        val result = run(acc)
        println("$i ${acc.length} -> ${result.length}")
        result
    }.length
}

val rawAtomicMapping = """
    1 	H 	22 	H 	91790.383216
    2 	He 	13112221133211322112211213322112 	Hf.Pa.H.Ca.Li 	3237.2968588
    3 	Li 	312211322212221121123222112 	He 	4220.0665982
    4 	Be 	111312211312113221133211322112211213322112 	Ge.Ca.Li 	2263.8860325
    5 	B 	1321132122211322212221121123222112 	Be 	2951.1503716
    6 	C 	3113112211322112211213322112 	B 	3847.0525419
    7 	N 	111312212221121123222112 	C 	5014.9302464
    8 	O 	132112211213322112 	N 	6537.3490750
    9 	F 	31121123222112 	O 	8521.9396539
    10 	Ne 	111213322112 	F 	11109.006696
    11 	Na 	123222112 	Ne 	14481.448773
    12 	Mg 	3113322112 	Pm.Na 	18850.441228
    13 	Al 	1113222112 	Mg 	24573.006696
    14 	Si 	1322112 	Al 	32032.812960
    15 	P 	311311222112 	Ho.Si 	14895.886658
    16 	S 	1113122112 	P 	19417.939250
    17 	Cl 	132112 	S 	25312.784218
    18 	Ar 	3112 	Cl 	32997.170122
    19 	K 	1112 	Ar 	43014.360913
    20 	Ca 	12 	K 	56072.543129
    21 	Sc 	3113112221133112 	Ho.Pa.H.Ca.Co 	9302.0974443
    22 	Ti 	11131221131112 	Sc 	12126.002783
    23 	V 	13211312 	Ti 	15807.181592
    24 	Cr 	31132 	V 	20605.882611
    25 	Mn 	111311222112 	Cr.Si 	26861.360180
    26 	Fe 	13122112 	Mn 	35015.858546
    27 	Co 	32112 	Fe 	45645.877256
    28 	Ni 	11133112 	Zn.Co 	13871.123200
    29 	Cu 	131112 	Ni 	18082.082203
    30 	Zn 	312 	Cu 	23571.391336
    31 	Ga 	13221133122211332 	Eu.Ca.Ac.H.Ca.Zn 	1447.8905642
    32 	Ge 	31131122211311122113222 	Ho.Ga 	1887.4372276
    33 	As 	11131221131211322113322112 	Ge.Na 	27.246216076
    34 	Se 	13211321222113222112 	As 	35.517547944
    35 	Br 	3113112211322112 	Se 	46.299868152
    36 	Kr 	11131221222112 	Br 	60.355455682
    37 	Rb 	1321122112 	Kr 	78.678000089
    38 	Sr 	3112112 	Rb 	102.56285249
    39 	Y 	1112133 	Sr.U 	133.69860315
    40 	Zr 	12322211331222113112211 	Y.H.Ca.Tc 	174.28645997
    41 	Nb 	1113122113322113111221131221 	Er.Zr 	227.19586752
    42 	Mo 	13211322211312113211 	Nb 	296.16736852
    43 	Tc 	311322113212221 	Mo 	386.07704943
    44 	Ru 	132211331222113112211 	Eu.Ca.Tc 	328.99480576
    45 	Rh 	311311222113111221131221 	Ho.Ru 	428.87015041
    46 	Pd 	111312211312113211 	Rh 	559.06537946
    47 	Ag 	132113212221 	Pd 	728.78492056
    48 	Cd 	3113112211 	Ag 	950.02745646
    49 	In 	11131221 	Cd 	1238.4341972
    50 	Sn 	13211 	In 	1614.3946687
    51 	Sb 	3112221 	Pm.Sn 	2104.4881933
    52 	Te 	1322113312211 	Eu.Ca.Sb 	2743.3629718
    53 	I 	311311222113111221 	Ho.Te 	3576.1856107
    54 	Xe 	11131221131211 	I 	4661.8342720
    55 	Cs 	13211321 	Xe 	6077.0611889
    56 	Ba 	311311 	Cs 	7921.9188284
    57 	La 	11131 	Ba 	10326.833312
    58 	Ce 	1321133112 	La.H.Ca.Co 	13461.825166
    59 	Pr 	31131112 	Ce 	17548.529287
    60 	Nd 	111312 	Pr 	22875.863883
    61 	Pm 	132 	Nd 	29820.456167
    62 	Sm 	311332 	Pm.Ca.Zn 	15408.115182
    63 	Eu 	1113222 	Sm 	20085.668709
    64 	Gd 	13221133112 	Eu.Ca.Co 	21662.972821
    65 	Tb 	3113112221131112 	Ho.Gd 	28239.358949
    66 	Dy 	111312211312 	Tb 	36812.186418
    67 	Ho 	1321132 	Dy 	47987.529438
    68 	Er 	311311222 	Ho.Pm 	1098.5955997
    69 	Tm 	11131221133112 	Er.Ca.Co 	1204.9083841
    70 	Yb 	1321131112 	Tm 	1570.6911808
    71 	Lu 	311312 	Yb 	2047.5173200
    72 	Hf 	11132 	Lu 	2669.0970363
    73 	Ta 	13112221133211322112211213322113 	Hf.Pa.H.Ca.W 	242.07736666
    74 	W 	312211322212221121123222113 	Ta 	315.56655252
    75 	Re 	111312211312113221133211322112211213322113 	Ge.Ca.W 	169.28801808
    76 	Os 	1321132122211322212221121123222113 	Re 	220.68001229
    77 	Ir 	3113112211322112211213322113 	Os 	287.67344775
    78 	Pt 	111312212221121123222113 	Ir 	375.00456738
    79 	Au 	132112211213322113 	Pt 	488.84742982
    80 	Hg 	31121123222113 	Au 	637.25039755
    81 	Tl 	111213322113 	Hg 	830.70513293
    82 	Pb 	123222113 	Tl 	1082.8883285
    83 	Bi 	3113322113 	Pm.Pb 	1411.6286100
    84 	Po 	1113222113 	Bi 	1840.1669683
    85 	At 	1322113 	Po 	2398.7998311
    86 	Rn 	311311222113 	Ho.At 	3127.0209328
    87 	Fr 	1113122113 	Rn 	4076.3134078
    88 	Ra 	132113 	Fr 	5313.7894999
    89 	Ac 	3113 	Ra 	6926.9352045
    90 	Th 	1113 	Ac 	7581.9047125
    91 	Pa 	13 	Th 	9883.5986392
    92 	U 	3 	Pa 	102.56285249
""".trimIndent()

private val atomicMapping = mapOf(
    "22" to listOf("22"),
    "13112221133211322112211213322112" to listOf("11132", "13", "22", "12", "312211322212221121123222112"),
    "312211322212221121123222112" to listOf("13112221133211322112211213322112"),
    "111312211312113221133211322112211213322112" to listOf("31131122211311122113222", "12", "312211322212221121123222112"),
    "1321132122211322212221121123222112" to listOf("111312211312113221133211322112211213322112"),
    "3113112211322112211213322112" to listOf("1321132122211322212221121123222112"),
    "111312212221121123222112" to listOf("3113112211322112211213322112"),
    "132112211213322112" to listOf("111312212221121123222112"),
    "31121123222112" to listOf("132112211213322112"),
    "111213322112" to listOf("31121123222112"),
    "123222112" to listOf("111213322112"),
    "3113322112" to listOf("132", "123222112"),
    "1113222112" to listOf("3113322112"),
    "1322112" to listOf("1113222112"),
    "311311222112" to listOf("1321132", "1322112"),
    "1113122112" to listOf("311311222112"),
    "132112" to listOf("1113122112"),
    "3112" to listOf("132112"),
    "1112" to listOf("3112"),
    "12" to listOf("1112"),
    "3113112221133112" to listOf("1321132", "13", "22", "12", "32112"),
    "11131221131112" to listOf("3113112221133112"),
    "13211312" to listOf("11131221131112"),
    "31132" to listOf("13211312"),
    "111311222112" to listOf("31132", "1322112"),
    "13122112" to listOf("111311222112"),
    "32112" to listOf("13122112"),
    "11133112" to listOf("312", "32112"),
    "131112" to listOf("11133112"),
    "312" to listOf("131112"),
    "13221133122211332" to listOf("1113222", "12", "3113", "22", "12", "312"),
    "31131122211311122113222" to listOf("1321132", "13221133122211332"),
    "11131221131211322113322112" to listOf("31131122211311122113222", "123222112"),
    "13211321222113222112" to listOf("11131221131211322113322112"),
    "3113112211322112" to listOf("13211321222113222112"),
    "11131221222112" to listOf("3113112211322112"),
    "1321122112" to listOf("11131221222112"),
    "3112112" to listOf("1321122112"),
    "1112133" to listOf("3112112", "3"),
    "12322211331222113112211" to listOf("1112133", "22", "12", "311322113212221"),
    "1113122113322113111221131221" to listOf("311311222", "12322211331222113112211"),
    "13211322211312113211" to listOf("1113122113322113111221131221"),
    "311322113212221" to listOf("13211322211312113211"),
    "132211331222113112211" to listOf("1113222", "12", "311322113212221"),
    "311311222113111221131221" to listOf("1321132", "132211331222113112211"),
    "111312211312113211" to listOf("311311222113111221131221"),
    "132113212221" to listOf("111312211312113211"),
    "3113112211" to listOf("132113212221"),
    "11131221" to listOf("3113112211"),
    "13211" to listOf("11131221"),
    "3112221" to listOf("132", "13211"),
    "1322113312211" to listOf("1113222", "12", "3112221"),
    "311311222113111221" to listOf("1321132", "1322113312211"),
    "11131221131211" to listOf("311311222113111221"),
    "13211321" to listOf("11131221131211"),
    "311311" to listOf("13211321"),
    "11131" to listOf("311311"),
    "1321133112" to listOf("11131", "22", "12", "32112"),
    "31131112" to listOf("1321133112"),
    "111312" to listOf("31131112"),
    "132" to listOf("111312"),
    "311332" to listOf("132", "12", "312"),
    "1113222" to listOf("311332"),
    "13221133112" to listOf("1113222", "12", "32112"),
    "3113112221131112" to listOf("1321132", "13221133112"),
    "111312211312" to listOf("3113112221131112"),
    "1321132" to listOf("111312211312"),
    "311311222" to listOf("1321132", "132"),
    "11131221133112" to listOf("311311222", "12", "32112"),
    "1321131112" to listOf("11131221133112"),
    "311312" to listOf("1321131112"),
    "11132" to listOf("311312"),
    "13112221133211322112211213322113" to listOf("11132", "13", "22", "12", "312211322212221121123222113"),
    "312211322212221121123222113" to listOf("13112221133211322112211213322113"),
    "111312211312113221133211322112211213322113" to listOf("31131122211311122113222", "12", "312211322212221121123222113"),
    "1321132122211322212221121123222113" to listOf("111312211312113221133211322112211213322113"),
    "3113112211322112211213322113" to listOf("1321132122211322212221121123222113"),
    "111312212221121123222113" to listOf("3113112211322112211213322113"),
    "132112211213322113" to listOf("111312212221121123222113"),
    "31121123222113" to listOf("132112211213322113"),
    "111213322113" to listOf("31121123222113"),
    "123222113" to listOf("111213322113"),
    "3113322113" to listOf("132", "123222113"),
    "1113222113" to listOf("3113322113"),
    "1322113" to listOf("1113222113"),
    "311311222113" to listOf("1321132", "1322113"),
    "1113122113" to listOf("311311222113"),
    "132113" to listOf("1113122113"),
    "3113" to listOf("132113"),
    "1113" to listOf("3113"),
    "13" to listOf("1113"),
    "3" to listOf("13"),
)

fun main() {
    val nameToString = mutableMapOf<String, String>()
    val nameToTargets = mutableMapOf<String, List<String>>()

    for (line in rawAtomicMapping.lines()) {
        if (line.isBlank()) {
            continue
        }

        val (_, name, string, target, _) = line.trim().split(Regex("\\s+"))
        nameToTargets[name] = target.split(".").toList()
        nameToString[name] = string
    }

    val nameToStrings: Map<String, List<String>> = nameToTargets.mapValues { (_, targets) -> targets.map { t -> nameToString[t]!! } }

    println("private val atomicMapping = mapOf(")

    for ((name, strings) in nameToStrings) {
        val stringsString = strings.joinToString(", ") { """"$it""""}
        println("""    "${nameToString[name]}" to listOf($stringsString),""")
    }

    println(")")
}

internal fun atomic(input: String, times: Int): Int {
    fun run(list: List<String>): List<String> {
        val new = mutableListOf<String>()

        for (item in list) {
            new.addAll(atomicMapping[item]!!)
        }

        return new
    }

    return (0 until times).fold(listOf(input)) { acc, i ->
        val result = run(acc)
        result
    }.sumOf { it.length }
}

internal fun run(input: String, times: Int, f: (String) -> String): Int {
    return (0 until times).fold(input) { acc, i ->
        val result = f(acc)
        println("$i ${acc.length} -> ${result.length}")
        result
    }.length
}

class D10P1 : Puzzle {
    override fun solve(input: String): Any {
        return atomic(input, 40)
//        return run(input, 40, ::naive)
    }
}

class D10P2 : Puzzle {
    override fun solve(input: String): Any {
        return atomic(input, 50)
    }
}